<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>python+ElasticSearch搜索数据</title>
      <link href="/2019/03/08/python-ElasticSearch%E6%90%9C%E7%B4%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/03/08/python-ElasticSearch%E6%90%9C%E7%B4%A2%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><p><excerpt in="" index="" |="" 首页摘要=""><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="ElasticSearch-安装-运行需要jdk1-8及以上"><a href="#ElasticSearch-安装-运行需要jdk1-8及以上" class="headerlink" title="ElasticSearch 安装(运行需要jdk1.8及以上)"></a>ElasticSearch 安装(运行需要jdk1.8及以上)</h2><p>ElasticSearch官网：<a href="http://www.elasticsearch.org" target="_blank" rel="noopener">http://www.elasticsearch.org</a><br>ElasticSearch下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>./elasticsearch.bat<br>localhost:9200 验证启动</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>./elasticsearch</p><pre><code class="hljs undefined"><span class="hljs-comment"># 如果服务器配置比较低</span>在/etc/security/limits.conf文件末尾加入 * soft nofile 65536 * hard nofile 131072 * soft nproc 2048 * hard nproc 4096 修改/etc/security/limits.d/20-nproc.conf * soft nproc 4096 改成 * soft nproc 8192 在/etc/systml.conf中添加 vm.<span class="hljs-attribute">max_map_count</span>=655360 最后执行命令 ‘sysctl -p’在config下有一个叫elasticsearch.yml的文件， 这个也是es的配置文件， es支持多种格式的配置文件，如properties,json等格式，此处我们需要更改配置文件中的： <span class="hljs-comment"># ---------------------------------- Network ------------------- </span>\# <span class="hljs-builtin-name">Set</span> the bind<span class="hljs-built_in"> address </span><span class="hljs-keyword">to</span> a specific<span class="hljs-built_in"> IP </span>(IPv4 <span class="hljs-keyword">or</span> IPv6): \#network.host: 0.0.0.0 \# <span class="hljs-builtin-name">Set</span> a custom<span class="hljs-built_in"> port </span><span class="hljs-keyword">for</span> HTTP: \#http.port: 9200 \# <span class="hljs-keyword">For</span> more information, consult the<span class="hljs-built_in"> network </span>module documentation. 需要更改配置为 <span class="hljs-comment"># ---------------------------------- Network ------------------- </span>\# <span class="hljs-builtin-name">Set</span> the bind<span class="hljs-built_in"> address </span><span class="hljs-keyword">to</span> a specific<span class="hljs-built_in"> IP </span>(IPv4 <span class="hljs-keyword">or</span> IPv6): network.host: 0.0.0.0 \# <span class="hljs-builtin-name">Set</span> a custom<span class="hljs-built_in"> port </span><span class="hljs-keyword">for</span> HTTP: http.port: 9200 \# <span class="hljs-keyword">For</span> more information, consult the<span class="hljs-built_in"> network </span>module documentation. c.如果elasticsearch 解压后不是放到用户根目录下，而是放到/usr/local下或者是其他系统文件夹下， 这是即使配置好，也可能因为权限的问题无法启动服务，需要更改elasticsearch文件夹及其子文件的权限,更改命名chmod,</code></pre><p>curl localhost:9200验证启动</p><hr><h2 id="安装ElasticSearch-head插件"><a href="#安装ElasticSearch-head插件" class="headerlink" title="安装ElasticSearch-head插件"></a>安装ElasticSearch-head插件</h2><p>安装nodejs <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><pre><code class="hljs undefined"><span class="hljs-built_in">cd</span> ElasticSearch-head  npm install</code></pre><p>修改 elastichsearch.yml</p><pre><code class="hljs undefined"><span class="hljs-selector-id">#allow</span> originhttp<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.enabled</span>: truehttp<span class="hljs-selector-class">.cors</span><span class="hljs-selector-class">.allow-origin</span>: <span class="hljs-string">"*"</span></code></pre><p>localhost:9100 验证是否安装成功</p><hr><h2 id="安装kibana插件"><a href="#安装kibana插件" class="headerlink" title="安装kibana插件"></a>安装kibana插件</h2><p>下载链接 <a href="https://www.elastic.co/downloads/kibana#ga-release" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana#ga-release</a></p><p>./elasticsearch.bat</p><p><a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a> 验证安装成功</p><hr><h2 id="kibana操作ES"><a href="#kibana操作ES" class="headerlink" title="kibana操作ES"></a>kibana操作ES</h2><p>参考博客链接：<a href="https://blog.csdn.net/linhaiyun_ytdx/article/details/79601743" target="_blank" rel="noopener">https://blog.csdn.net/linhaiyun_ytdx/article/details/79601743</a><br>略</p><h2 id="python-操作ES"><a href="#python-操作ES" class="headerlink" title="python 操作ES"></a>python 操作ES</h2><p>官方文档： <a href="https://elasticsearch-py.readthedocs.io/en/master/" target="_blank" rel="noopener">https://elasticsearch-py.readthedocs.io/en/master/</a></p><pre><code class="hljs undefined"><span class="hljs-meta">#</span><span class="bash"> 链接es</span>es = Elasticsearch(['127.0.0.1:9200'])<span class="hljs-meta">#</span><span class="bash"> 查看文档</span><span class="hljs-meta">#</span><span class="bash"> result = es.get(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, id=1)</span><span class="hljs-meta">#</span><span class="bash"> pprint(result[<span class="hljs-string">'_source'</span>])</span><span class="hljs-meta">#</span><span class="bash"> 插入文档</span><span class="hljs-meta">#</span><span class="bash"> body = &#123;<span class="hljs-string">"name"</span>: <span class="hljs-string">'lucy'</span>, <span class="hljs-string">'sex'</span>: <span class="hljs-string">'female'</span>, <span class="hljs-string">'age'</span>: 10&#125;</span><span class="hljs-meta">#</span><span class="bash"> es.index(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, body=body, id=2)</span><span class="hljs-meta">#</span><span class="bash"> pprint(es.get(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, id=2)[<span class="hljs-string">'_source'</span>])</span><span class="hljs-meta">#</span><span class="bash"> 删除文档</span><span class="hljs-meta">#</span><span class="bash"> es.delete(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, id=2)</span><span class="hljs-meta">#</span><span class="bash"> 更新文档</span><span class="hljs-meta">#</span><span class="bash"> es.update(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, id=1, body=&#123;<span class="hljs-string">'doc'</span>: &#123;<span class="hljs-string">'comments'</span>: 50&#125;&#125;)</span><span class="hljs-meta">#</span><span class="bash"> result1 = es.get(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, id=1)</span><span class="hljs-meta">#</span><span class="bash"> pprint(result1[<span class="hljs-string">'_source'</span>])</span><span class="hljs-meta">#</span><span class="bash"> 批量查询</span><span class="hljs-meta">#</span><span class="bash"> query = &#123;<span class="hljs-string">'query'</span>: &#123;<span class="hljs-string">'match_all'</span>: &#123;&#125;&#125;&#125;    <span class="hljs-comment"># 查找所有文档</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-comment"># query = &#123;'query': &#123;'term': &#123;'name': 'jack'&#125;&#125;&#125;   # 查找名字叫做jack的所有文档</span></span><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-comment"># query = &#123;'query': &#123;'range': &#123;'age': &#123;'gt': 11&#125;&#125;&#125;&#125;   # 查找年龄大于11的所有文档</span></span><span class="hljs-meta">#</span><span class="bash"> allDoc = es.search(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, body=query)</span><span class="hljs-meta">#</span><span class="bash"> pprint(allDoc[<span class="hljs-string">'hits'</span>][<span class="hljs-string">'hits'</span>])  <span class="hljs-comment"># 返回第一个文档的内容</span></span><span class="hljs-meta">#</span><span class="bash"> 条件删除</span><span class="hljs-meta">#</span><span class="bash"> query = &#123;<span class="hljs-string">'query'</span>: &#123;<span class="hljs-string">'match'</span>: &#123;<span class="hljs-string">"city"</span>: <span class="hljs-string">"北京"</span>&#125;&#125;&#125;    <span class="hljs-comment"># 删除城市是北京的文档</span></span><span class="hljs-meta">#</span><span class="bash"> query = &#123;<span class="hljs-string">'query'</span>: &#123;<span class="hljs-string">'range'</span>: &#123;<span class="hljs-string">'age'</span>: &#123;<span class="hljs-string">'lt'</span>: 11&#125;&#125;&#125;&#125; <span class="hljs-comment"># 删除年龄小于11的所有文档</span></span><span class="hljs-meta">#</span><span class="bash"> es.delete_by_query(index=<span class="hljs-string">'thytest'</span>,  doc_type=<span class="hljs-string">'job'</span>, body=query)</span><span class="hljs-meta">#</span><span class="bash"> 条件更新</span><span class="hljs-meta">#</span><span class="bash"> es.update_by_query(index=<span class="hljs-string">'thytest'</span>,  doc_type=<span class="hljs-string">'job'</span>, body=query)</span><span class="hljs-meta">#</span><span class="bash"> bulk：批量插入、删除、更新</span><span class="hljs-meta">#</span><span class="bash"> doc = [</span><span class="hljs-meta">#</span><span class="bash">    &#123;<span class="hljs-string">'index'</span>: &#123;<span class="hljs-string">'_index'</span>: <span class="hljs-string">'thytest'</span>, <span class="hljs-string">'_type'</span>: <span class="hljs-string">'job'</span>, <span class="hljs-string">'_id'</span>: <span class="hljs-string">'1'</span>&#125;&#125;,</span><span class="hljs-meta">#</span><span class="bash">    &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'jack'</span>, <span class="hljs-string">'sex'</span>: <span class="hljs-string">'male'</span>, <span class="hljs-string">'age'</span>: 10&#125;,</span><span class="hljs-meta">#</span><span class="bash">    &#123;<span class="hljs-string">'delete'</span>: &#123;<span class="hljs-string">'_index'</span>: <span class="hljs-string">'indexName'</span>, <span class="hljs-string">'_type'</span>: <span class="hljs-string">'typeName'</span>, <span class="hljs-string">'_id'</span>: <span class="hljs-string">'idValue'</span>&#125;&#125;,</span><span class="hljs-meta">#</span><span class="bash">    &#123;<span class="hljs-string">"create"</span>: &#123;<span class="hljs-string">'_index'</span>: <span class="hljs-string">'indexName'</span>, <span class="hljs-string">"_type"</span>: <span class="hljs-string">'typeName'</span>, <span class="hljs-string">'_id'</span>: <span class="hljs-string">'idValue'</span>&#125;&#125;,</span><span class="hljs-meta">#</span><span class="bash">    &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'lucy'</span>, <span class="hljs-string">'sex'</span>: <span class="hljs-string">'female'</span>, <span class="hljs-string">'age'</span>: 20&#125;,</span><span class="hljs-meta">#</span><span class="bash">    &#123;<span class="hljs-string">'update'</span>: &#123;<span class="hljs-string">'_index'</span>: <span class="hljs-string">'indexName'</span>, <span class="hljs-string">'_type'</span>: <span class="hljs-string">'typeName'</span>, <span class="hljs-string">'_id'</span>: <span class="hljs-string">'idValue'</span>&#125;&#125;,</span><span class="hljs-meta">#</span><span class="bash">    &#123;<span class="hljs-string">'doc'</span>: &#123;<span class="hljs-string">'age'</span>: <span class="hljs-string">'100'</span>&#125;&#125;</span><span class="hljs-meta">#</span><span class="bash"> ]</span><span class="hljs-meta">#</span><span class="bash"> es.bulk(index=<span class="hljs-string">'thytest'</span>, doc_type=<span class="hljs-string">'job'</span>, body=doc)</span><span class="hljs-meta">#</span><span class="bash"> 复合查询 must: A and B, should: A or B, must_not: 非A</span><span class="hljs-meta">   #</span><span class="bash"> body = &#123;<span class="hljs-string">"query"</span>: &#123;</span><span class="hljs-meta">   #</span><span class="bash">             <span class="hljs-string">"bool"</span>: &#123;</span><span class="hljs-meta">   #</span><span class="bash">                 <span class="hljs-string">"must"</span>: [</span><span class="hljs-meta">   #</span><span class="bash">                     &#123;<span class="hljs-string">"match"</span>: &#123;<span class="hljs-string">"title"</span>: &#123;<span class="hljs-string">"query"</span>: <span class="hljs-string">"泰州 人民"</span>, <span class="hljs-string">"operator"</span>: <span class="hljs-string">"or"</span>&#125;&#125;&#125;,</span><span class="hljs-meta">   #</span><span class="bash">                     &#123;<span class="hljs-string">"match"</span>: &#123;<span class="hljs-string">"title"</span>: &#123;<span class="hljs-string">"query"</span>: <span class="hljs-string">"注意 知道 关系"</span>, <span class="hljs-string">"operator"</span>: <span class="hljs-string">"or"</span>&#125;&#125;&#125;,</span><span class="hljs-meta">   #</span><span class="bash">                 ],</span><span class="hljs-meta">   #</span><span class="bash">                 <span class="hljs-string">"must_not"</span>: [</span><span class="hljs-meta">   #</span><span class="bash">                     &#123;<span class="hljs-string">"match"</span>: &#123;<span class="hljs-string">"title"</span>: &#123;<span class="hljs-string">"query"</span>: <span class="hljs-string">"你走 快点"</span>&#125;, <span class="hljs-string">"operator"</span>: <span class="hljs-string">"or"</span>&#125;&#125;&#125;,</span><span class="hljs-meta">   #</span><span class="bash">                 ]</span><span class="hljs-meta">   #</span><span class="bash">             &#125;&#125;&#125;</span><span class="hljs-meta">   #</span><span class="bash"> 查询 含有(<span class="hljs-string">'泰州'</span> or <span class="hljs-string">'人民'</span>) and (<span class="hljs-string">'注意'</span> or <span class="hljs-string">'知道'</span> or <span class="hljs-string">'关系'</span>), 排除(<span class="hljs-string">'你走'</span> or <span class="hljs-string">'快点'</span>)</span></code></pre></the><!-- rebuild by neat -->]]></content>
      
      
    </entry>
    
    <entry>
      <title>pm2</title>
      <link href="/2019/03/05/pm2/"/>
      <url>/2019/03/05/pm2/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
      
      
    </entry>
    
    <entry>
      <title>TotalControl</title>
      <link href="/2019/03/05/TotalControl/"/>
      <url>/2019/03/05/TotalControl/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
      
      
    </entry>
    
    <entry>
      <title>Charles</title>
      <link href="/2019/03/05/Charles/"/>
      <url>/2019/03/05/Charles/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
      
      
    </entry>
    
    <entry>
      <title>Anyproxy</title>
      <link href="/2019/03/05/Anyproxy/"/>
      <url>/2019/03/05/Anyproxy/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><p>官方文档：<a href="http://anyproxy.io/cn/" target="_blank" rel="noopener">http://anyproxy.io/cn/</a><br>github主页：<a href="https://github.com/alibaba/anyproxy" target="_blank" rel="noopener">https://github.com/alibaba/anyproxy</a></p><p>安装命令：npm install -g anyproxy<br>启动：anyproxy</p><p>linux服务端安装anyproxy<br><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home &amp;&amp; wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz &amp;&amp; tar xf  node-v10.9.0-linux-x64.tar.xz &amp;&amp; ln -s /home/node-v10.9.0-linux-x64/bin/node /usr/<span class="hljs-built_in">local</span>/bin/ &amp;&amp; ln -s /home/node-v10.9.0-linux-x64/bin/npm /usr/<span class="hljs-built_in">local</span>/bin/ &amp;&amp; npm install -g anyproxy pm2</code></pre></p><p>将anyproxy加到系统环境变量<br><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">"export PATH=/home/node-v10.9.0-linux-x64/bin:<span class="hljs-variable">$PATH</span>"</span> &gt;&gt; /etc/profile &amp;&amp; <span class="hljs-built_in">source</span> /etc/profile</code></pre></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
          <category> 抓包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github+hexo搭建个人博客网站</title>
      <link href="/2019/02/28/github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2019/02/28/github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><p><excerpt in="" index="" |="" 首页摘要=""><br>&#8195;&#8195;很早之前就想做个博客了,最早搭博客是用 阿里云服务器+WordPress,但是毕竟阿里云是要钱的,于是找到了这款hexo,<br>基于Node.js的静态博客框架,可以方便的生成静态网页托管在GitHub和Coding上,主要原因还是免费！</excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><font color="#FF0000," size="4">hexo 官方文档:&#8195; <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></font><br><font color="#FF0000," size="4">[CSDN] hexo 史上最全搭建教程: &#8195; <a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></font><p>废话不多说,直接上步骤：</p><h2 id="配置本地环境"><a href="#配置本地环境" class="headerlink" title="配置本地环境"></a>配置本地环境</h2><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>&#8195; windows 下载地址：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a><br>&#8195; 安装完成后<br><pre><code class="hljs undefined">git <span class="hljs-comment">--version</span></code></pre></p><p>&#8195;确认安装是否成功</p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>&#8195; windows 下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>&#8195; 安装完成后<br><pre><code class="hljs undefined"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> &amp;&amp; npm -v</code></pre></p><p>&#8195;确认安装是否成功</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>&#8195; cmd输入命令行：<br><pre><code class="hljs undefined">npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre></p><p>&#8195;安装完成后<br><pre><code class="hljs undefined"><span class="hljs-attribute">hexo -v</span></code></pre></p><p>&#8195;确认安装是否成功</p><hr><h2 id="hexo-基本命令"><a href="#hexo-基本命令" class="headerlink" title="hexo 基本命令"></a>hexo 基本命令</h2><p>&#8195;新建一个blog项目<br><pre><code class="hljs undefined"><span class="hljs-symbol">hexo</span> init <span class="hljs-keyword">blogname</span><span class="hljs-symbol">cd</span> <span class="hljs-keyword">blogname</span><span class="hljs-symbol">npm</span> install</code></pre></p><p>&#8195;生成文件夹目录如下<br><pre><code class="hljs undefined">.├── <span class="hljs-variable">_config</span>.yml         <span class="hljs-comment">// 博客的配置文件**</span>├── package.json        <span class="hljs-comment">// 应用程序的信息</span>├── scaffolds           <span class="hljs-comment">// 文章模板</span>├── source              |   ├── <span class="hljs-variable">_drafts</span>         <span class="hljs-comment">// 草稿箱</span>|   └── <span class="hljs-variable">_posts</span>          <span class="hljs-comment">// 发布的博文.md文件目录</span>└── themes              <span class="hljs-comment">// 主题文件</span></code></pre></p><p>&#8195;常用基本操作<br><pre><code class="hljs undefined">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">"mdname"</span>              <span class="hljs-comment">// 新建文章</span>hexo clean                     <span class="hljs-comment">// 清除缓存</span>hexo s                         <span class="hljs-comment">// 启动本地服务预览</span>hexo g                         <span class="hljs-comment">// 生成静态页面</span>hexo d                         <span class="hljs-comment">// 部署到网站</span></code></pre></p><p>&#8195;</p><hr><h2 id="hexo-静态页面-托管到-github"><a href="#hexo-静态页面-托管到-github" class="headerlink" title="hexo 静态页面 托管到 github"></a>hexo 静态页面 托管到 github</h2><hr><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><hr><h2 id="定制博客风格"><a href="#定制博客风格" class="headerlink" title="定制博客风格"></a>定制博客风格</h2></the><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python csv/txt/excel</title>
      <link href="/2019/02/26/python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/02/26/python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><excerpt in="" index="" |="" 首页摘要=""><p>&#8195;&#8195;python 文件操作,数据导出,数据导入,经常会用到内置的文件操作库,这里汇总了基本的用法</p><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1.打开文件"></a>1.打开文件</h2><pre><code class="hljs undefined">open(file, <span class="hljs-attribute">mode</span>=<span class="hljs-string">'r'</span>, <span class="hljs-attribute">buffering</span>=None, <span class="hljs-attribute">encoding</span>=None, <span class="hljs-attribute">errors</span>=None, <span class="hljs-attribute">newline</span>=None, <span class="hljs-attribute">closefd</span>=<span class="hljs-literal">True</span>)</code></pre><h3 id="mode-读写模式-详细有如下几点-："><a href="#mode-读写模式-详细有如下几点-：" class="headerlink" title="mode(读写模式,详细有如下几点)："></a>mode(读写模式,详细有如下几点)：</h3><p>&#8195;’r’ : 以读方式打开文件,可读取文件信息<br>&#8195;’w’ : 已写方式打开文件,可向文件写入信息。如文件存在,则清空,再写入<br>&#8195;’a’ : 以追加模式打开文件,打开文件可指针移至末尾,文件不存在则创建<br>&#8195;’r+’: 以读写方式打开文件,可对文件进行读和写操作<br>&#8195;’w+’: 消除文件内容,以读写方式打开文件<br>&#8195;’a+’: 以读写方式打开文件,文件指针移至末尾<br>&#8195;’b’ : 以二进制打开文件<br>&#8195;’x’ : 创建一个新文件并打开它写入<br>&#8195;’U’ : 普通换行模式</p><pre><code class="hljs undefined"># 要读取二进制文件,比如图片、视频等等,用<span class="hljs-string">'rb'</span>模式打开文件即可： f = <span class="hljs-built_in">open</span>(<span class="hljs-string">'/Users/michael/test.jpg'</span>, <span class="hljs-string">'rb'</span>)  f.<span class="hljs-built_in">read</span>()</code></pre><h3 id="buffering-缓冲模式-："><a href="#buffering-缓冲模式-：" class="headerlink" title="buffering(缓冲模式)：  　"></a>buffering(缓冲模式)：</h3><p>&#8195;0：缓冲关闭(只允许二进制模式下)<br>&#8195;1：行缓冲(只允许文本模式下)<br>&#8195;整数:固定缓冲区大小</p><h3 id="encoding-设置用于解码或编码的编码方式-："><a href="#encoding-设置用于解码或编码的编码方式-：" class="headerlink" title="encoding(设置用于解码或编码的编码方式)："></a>encoding(设置用于解码或编码的编码方式)：</h3><pre><code class="hljs undefined"><span class="hljs-comment"># 要读取非UTF-8编码的文本文件,需要给open()函数传入encoding参数,例如,读取GBK编码的文件：</span>f = <span class="hljs-keyword">open</span>(<span class="hljs-string">'/Users/michael/gbk.txt'</span>, <span class="hljs-string">'r'</span>, <span class="hljs-keyword">encoding</span>=<span class="hljs-string">'gbk'</span>)f.<span class="hljs-keyword">read</span>()</code></pre><h3 id="errors-可选字符串-它指定编码错误的方式"><a href="#errors-可选字符串-它指定编码错误的方式" class="headerlink" title="errors(可选字符串,它指定编码错误的方式):"></a>errors(可选字符串,它指定编码错误的方式):</h3><pre><code class="hljs undefined"><span class="hljs-comment"># 遇到有些编码不规范的文件,你可能会遇到UnicodeDecodeError,因为在文本文件中可能夹杂了一些非法编码的字符。</span><span class="hljs-comment"># 遇到这种情况,open()函数还接收一个errors参数,表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</span><span class="hljs-attr">f</span> = open(<span class="hljs-string">'/Users/michael/gbk.txt'</span>, <span class="hljs-string">'r'</span>, encoding=<span class="hljs-string">'gbk'</span>, errors=<span class="hljs-string">'ignore'</span>)</code></pre><h3 id="newline-换行控制-通用换行的工作方式-它只适用于文本模式"><a href="#newline-换行控制-通用换行的工作方式-它只适用于文本模式" class="headerlink" title="newline(换行控制,通用换行的工作方式,它只适用于文本模式):"></a>newline(换行控制,通用换行的工作方式,它只适用于文本模式):</h3><p>&#8195;无,”\n”,”\r”和”\r\n”</p><h3 id="closefd"><a href="#closefd" class="headerlink" title="closefd:"></a>closefd:</h3><p>&#8195;如果closefd为False,那么底层文件描述符将保持打开。<br>&#8195;当文件被关闭时。当给定文件名时,将不起作用,默认为true</p><h3 id="return-fileobj"><a href="#return-fileobj" class="headerlink" title="return fileobj"></a>return fileobj</h3><hr><h2 id="2-写入csv"><a href="#2-写入csv" class="headerlink" title="2.写入csv"></a>2.写入csv</h2><p>将open()方法返回的fileobj写入excel<br><pre><code class="hljs undefined">csv_writer = csv.writer(fileobj [<span class="hljs-string">, dialect='excel'</span>][<span class="hljs-symbol">optional keyword args</span>])<span class="hljs-code">    for row in sequence:</span><span class="hljs-code">        csv_writer.writerow(row)</span></code></pre></p><p>or</p><pre><code class="hljs undefined">csv_writer = csv.writer(fileobj [<span class="hljs-string">, dialect='excel'</span>][<span class="hljs-symbol">optional keyword args</span>])csv_writer.writerows(rows)</code></pre><hr><h2 id="3-读取csv"><a href="#3-读取csv" class="headerlink" title="3.读取csv"></a>3.读取csv</h2><p>将open()方法返回的fileobj读取出来<br><pre><code class="hljs undefined">csv_reader = reader(fileobj [<span class="hljs-string">, dialect='excel'</span>][<span class="hljs-symbol">optional keyword args</span>])<span class="hljs-code">    for row in csv_reader:</span><span class="hljs-code">        process(row)</span></code></pre></p><hr><h2 id="4-with-open-as"><a href="#4-with-open-as" class="headerlink" title="4.with open as"></a>4.with open as</h2><p>自动调用close()方法</p><pre><code class="hljs undefined"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'/path/to/file'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:print(f.<span class="hljs-built_in">read</span>())</code></pre><hr><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><pre><code class="hljs undefined"><span class="hljs-meta"># 创建写入</span>csvfile=open(<span class="hljs-string">'csv_test.csv'</span>,<span class="hljs-string">'wb'</span>)<span class="hljs-meta"># csvfile.write(codecs.BOM_UTF8)</span><span class="hljs-meta"># 防止文件中显示中文乱码(并非乱码）,若注意生成文件编码,用notepad++转码也能正常显示。</span>writer=csv.writer(csvfile)writer.writerow([<span class="hljs-string">'姓名'</span>,<span class="hljs-string">'年龄'</span>,<span class="hljs-string">'电话'</span>])data=[(<span class="hljs-string">'alex'</span>,<span class="hljs-string">'23'</span>,<span class="hljs-string">'139'</span>),(<span class="hljs-string">'tom'</span>,<span class="hljs-string">'43'</span>,<span class="hljs-string">'189'</span>)]writer.writerows(data)csvfile.close()</code></pre><p>–</p><pre><code class="hljs undefined"><span class="hljs-comment"># 读取</span>csvfile=<span class="hljs-built_in">open</span>(<span class="hljs-string">'csv_test.csv'</span>,<span class="hljs-string">'rb'</span>)reader=csv.reader(csvfile)<span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> reader:    print <span class="hljs-built_in">line</span>csvfile.<span class="hljs-built_in">close</span>()</code></pre><p>–</p><pre><code class="hljs undefined">&lt;form action=<span class="hljs-string">'test_form_action'</span> method=post&gt;    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"rows.Column1:records"</span> value=<span class="hljs-string">"0"</span> /&gt;    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"rows.Column2:records"</span> value=<span class="hljs-string">"1"</span> /&gt;    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"rows.Column3:records"</span> value=<span class="hljs-string">"2"</span> /&gt;    &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">"text"</span> name=<span class="hljs-string">"rows.Column4:records"</span> value=<span class="hljs-string">"3"</span> /&gt;&lt;<span class="hljs-keyword">br</span> /&gt;#构造dict写入fieldnames = [<span class="hljs-string">'Column1'</span>, <span class="hljs-string">'Column2'</span>, <span class="hljs-string">'Column3'</span>, <span class="hljs-string">'Column4'</span>] dict_writer = csv.DictWriter(<span class="hljs-keyword">file</span>(<span class="hljs-string">'your.csv'</span>, <span class="hljs-string">'wb'</span>), fieldnames=fieldnames)dict_writer. writeheader(fieldnames) # CSV第一行需要自己加入dict_writer.writerows(rows)</code></pre><p>–</p><pre><code class="hljs undefined"><span class="hljs-comment">#txt读写</span><span class="hljs-comment">#文件创建和写入</span>f=open(<span class="hljs-string">'test.txt'</span>,<span class="hljs-string">'w'</span>)f.write(<span class="hljs-string">'hello world'</span>)<span class="hljs-comment">#数据只写到缓存,未保存到文件</span>f.close()<span class="hljs-comment">#保存到文件</span> f1=open(<span class="hljs-string">'test.txt'</span>,<span class="hljs-string">'r+'</span>)<span class="hljs-comment">#r+模式不会清空文件,而是替换内容</span>f1.write(<span class="hljs-string">'hello boy'</span>)f1.close() f2=open(<span class="hljs-string">'test.txt'</span>,<span class="hljs-string">'a'</span>)<span class="hljs-comment">#a模式实现追加</span>f2.write(<span class="hljs-string">'\nhello girl'</span>)f2.writelines([<span class="hljs-string">'\n你好'</span>,<span class="hljs-string">'\n再见'</span>])<span class="hljs-comment">#多行写入</span>f2.flush()<span class="hljs-comment">#将修改写入文件,无须关闭</span><span class="hljs-comment">#文件读取(按指针）</span>f3=open(<span class="hljs-string">'test.txt'</span>)<span class="hljs-keyword">print</span> f3.read(<span class="hljs-number">1</span>)f3.seek(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-string">'''f.seek(偏移量,选项)（1）选项=0,表示将文件指针指向从文件头部到"偏移量"字节处（2）选项=1,表示将文件指针指向从文件的当前位置,向后移动"偏移量"字节（3）选项=2,表示将文件指针指向从文件的尾部,向前移动"偏移量"字节'''</span><span class="hljs-keyword">print</span> f3.read(<span class="hljs-number">1</span>)<span class="hljs-keyword">print</span> f3.tell()<span class="hljs-comment">#获取指针位置</span>f3.close() <span class="hljs-comment">#文件读取（按行）</span><span class="hljs-string">'''f3.read()#读取所有f3.readline()#逐行读取f3.next()#类readline,未读到报错f3.readlines()#列表形式存放for i in open('test.txt'):    print i'''</span> <span class="hljs-comment">#文件操作（查找)</span> <span class="hljs-comment">#方法一：全内容查找</span>f4=open(<span class="hljs-string">'test.txt'</span>)source=f4.read()f4.close()s=len(re.findall(<span class="hljs-string">'hello'</span>,source))<span class="hljs-keyword">print</span> s <span class="hljs-comment">#方法二：按行查找</span>f5=open(<span class="hljs-string">'test.txt'</span>)count=<span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f5.readlines():    li=re.findall(<span class="hljs-string">'hello'</span>,i)    <span class="hljs-keyword">if</span> len(li)&gt;<span class="hljs-number">0</span>:        count=count+len(li)<span class="hljs-keyword">print</span> <span class="hljs-string">'search'</span>,count,<span class="hljs-string">'hello'</span>f5.close() <span class="hljs-comment">#文件操作（替换）实例：把test.txt 中的hello全部换为"hi",并把结果保存到myhello.txt中。</span>f6=open(<span class="hljs-string">'test.txt'</span>)f7=open(<span class="hljs-string">'myhello.txt'</span>,<span class="hljs-string">'a'</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f6.readlines():    f7.write(i.replace(<span class="hljs-string">'hello'</span>,<span class="hljs-string">'hi'</span>))f6.close()f7.close() <span class="hljs-comment">#实例：读取文件test.txt内容,去除空行和注释行后,以行为单位进行排序,并将结果输出为result.txt。</span>f = open(<span class="hljs-string">'cdays-4-test.txt'</span>)result = list()<span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():                <span class="hljs-comment"># 逐行读取数据</span>    line = line.strip()                <span class="hljs-comment">#去掉每行头尾空白</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> len(line) <span class="hljs-keyword">or</span> line.startswith(<span class="hljs-string">'#'</span>):   <span class="hljs-comment"># 判断是否是空行或注释行</span>        <span class="hljs-keyword">continue</span>                  <span class="hljs-comment">#是的话,跳过不处理</span>    result.append(line)              <span class="hljs-comment">#保存</span>result.sort()                       <span class="hljs-comment">#排序结果</span><span class="hljs-keyword">print</span> resultopen(<span class="hljs-string">'result.txt'</span>,<span class="hljs-string">'w'</span>).write(<span class="hljs-string">'%s'</span> % <span class="hljs-string">'\n'</span>.join(result))        <span class="hljs-comment">#保存入结果文件</span></code></pre></excerpt><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> data export </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[<!-- build time:Wed Jan 15 2020 16:07:46 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    </entry>
    
  
</search>
