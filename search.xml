<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>python csv/txt 读写模式详解</title>
      <link href="/2019/02/26/python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/02/26/python%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>python 文件操作，数据导出，数据导入，经常会用到内置的文件操作库，有需求的时候，ctrl到库里查源代码会找到很多用法，这里只是为了方便查询，截取一些常用用法写到文章里。</p><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1.打开文件"></a>1.打开文件</h2><blockquote><p>open(file, mode=’r’, buffering=None, encoding=None, errors=None, newline=None, closefd=True)</p></blockquote><p>file: file_path  # 例如：’conf/stu.csv’</p><p>mode：读写模式，详细有如下几点</p><pre><code>&apos;r&apos;以读方式打开文件，可读取文件信息&apos;w&apos;已写方式打开文件，可向文件写入信息。如文件存在，则清空，再写入&apos;a&apos;以追加模式打开文件，打开文件可指针移至末尾，文件不存在则创建&apos;r+&apos;以读写方式打开文件，可对文件进行读和写操作&apos;w+&apos;消除文件内容，以读写方式打开文件&apos;a+&apos;以读写方式打开文件，文件指针移至末尾&apos;b&apos;以二进制打开文件&apos;x&apos;创建一个新文件并打开它写入&apos;t&apos;text模式（默认）&apos;U&apos;普通换行模式</code></pre><p>–</p><pre><code>要读取二进制文件，比如图片、视频等等，用&apos;rb&apos;模式打开文件即可：f = open(&apos;/Users/michael/test.jpg&apos;, &apos;rb&apos;)f.read()</code></pre><p>buffering：缓冲模式</p><pre><code>0：缓冲关闭（只允许二进制模式下）1：行缓冲（只允许文本模式下）&gt;1整数:固定缓冲区大小</code></pre><p>encoding：设置用于解码或编码的编码方式。</p><pre><code>要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：f = open(&apos;/Users/michael/gbk.txt&apos;, &apos;r&apos;, encoding=&apos;gbk&apos;)f.read()</code></pre><p>errors:可选字符串，它指定编码错误的方式</p><pre><code>遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：f = open(&apos;/Users/michael/gbk.txt&apos;, &apos;r&apos;, encoding=&apos;gbk&apos;, errors=&apos;ignore&apos;)</code></pre><p>newline:换行控制，通用换行的工作方式(它只适用于文本)<br>模式)。它可以是无，“\n”，“\r”和“\r\n”。</p><p>closefd:如果closefd为False，那么底层文件描述符将保持打开。<br>当文件被关闭时。当给定文件名时，将不起作用，默认为true</p><p>return fileobj</p><h2 id="2-写入csv"><a href="#2-写入csv" class="headerlink" title="2.写入csv"></a>2.写入csv</h2><p>将open()方法返回的fileobj写入excel</p><pre><code>csv_writer = csv.writer(fileobj [, dialect=&apos;excel&apos;][optional keyword args])    for row in sequence:        csv_writer.writerow(row)</code></pre><p> or   </p><pre><code>csv_writer = csv.writer(fileobj [, dialect=&apos;excel&apos;][optional keyword args])csv_writer.writerows(rows)</code></pre><h2 id="3-读取csv"><a href="#3-读取csv" class="headerlink" title="3.读取csv"></a>3.读取csv</h2><p>将open()方法返回的fileobj读取出来</p><pre><code>csv_reader = reader(fileobj [, dialect=&apos;excel&apos;][optional keyword args])    for row in csv_reader:        process(row)</code></pre><h2 id="4-with-open-as"><a href="#4-with-open-as" class="headerlink" title="4.with open as"></a>4.with open as</h2><p>自动调用close()方法</p><pre><code> with open(&apos;/path/to/file&apos;, &apos;r&apos;) as f:print(f.read())</code></pre><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><pre><code>创建写入csvfile=open(&apos;csv_test.csv&apos;,&apos;wb&apos;)# csvfile.write(codecs.BOM_UTF8)# 防止文件中显示中文乱码(并非乱码）,若注意生成文件编码，用notepad++转码也能正常显示。writer=csv.writer(csvfile)writer.writerow([&apos;姓名&apos;,&apos;年龄&apos;,&apos;电话&apos;])data=[(&apos;alex&apos;,&apos;23&apos;,&apos;139&apos;),(&apos;tom&apos;,&apos;43&apos;,&apos;189&apos;)]writer.writerows(data)csvfile.close()</code></pre><p>–</p><pre><code>#读取csvfile=open(&apos;csv_test.csv&apos;,&apos;rb&apos;)reader=csv.reader(csvfile)for line in reader:    print linecsvfile.close()</code></pre><p>–</p><pre><code>&lt;form action=&apos;test_form_action&apos; method=post&gt;        &lt;input type=&quot;text&quot; name=&quot;rows.Column1:records&quot; value=&quot;0&quot; /&gt;        &lt;input type=&quot;text&quot; name=&quot;rows.Column2:records&quot; value=&quot;1&quot; /&gt;        &lt;input type=&quot;text&quot; name=&quot;rows.Column3:records&quot; value=&quot;2&quot; /&gt;        &lt;input type=&quot;text&quot; name=&quot;rows.Column4:records&quot; value=&quot;3&quot; /&gt;&lt;br /&gt;#构造dict写入fieldnames = [&apos;Column1&apos;, &apos;Column2&apos;, &apos;Column3&apos;, &apos;Column4&apos;] dict_writer = csv.DictWriter(file(&apos;your.csv&apos;, &apos;wb&apos;), fieldnames=fieldnames)dict_writer. writeheader(fieldnames) # CSV第一行需要自己加入dict_writer.writerows(rows) </code></pre><p>–</p><pre><code>#txt读写#文件创建和写入f=open(&apos;test.txt&apos;,&apos;w&apos;)f.write(&apos;hello world&apos;)#数据只写到缓存，未保存到文件f.close()#保存到文件f1=open(&apos;test.txt&apos;,&apos;r+&apos;)#r+模式不会清空文件，而是替换内容f1.write(&apos;hello boy&apos;)f1.close()f2=open(&apos;test.txt&apos;,&apos;a&apos;)#a模式实现追加f2.write(&apos;\nhello girl&apos;)f2.writelines([&apos;\n你好&apos;,&apos;\n再见&apos;])#多行写入f2.flush()#将修改写入文件，无须关闭#文件读取(按指针）f3=open(&apos;test.txt&apos;)print f3.read(1)f3.seek(1,1)&apos;&apos;&apos;f.seek(偏移量，选项)（1）选项=0，表示将文件指针指向从文件头部到“偏移量”字节处（2）选项=1，表示将文件指针指向从文件的当前位置，向后移动“偏移量”字节（3）选项=2，表示将文件指针指向从文件的尾部，向前移动“偏移量”字节&apos;&apos;&apos;print f3.read(1)print f3.tell()#获取指针位置f3.close()#文件读取（按行）&apos;&apos;&apos;f3.read()#读取所有f3.readline()#逐行读取f3.next()#类readline，未读到报错f3.readlines()#列表形式存放for i in open(&apos;test.txt&apos;):    print i&apos;&apos;&apos;#文件操作（查找)#方法一：全内容查找f4=open(&apos;test.txt&apos;)source=f4.read()f4.close()s=len(re.findall(&apos;hello&apos;,source))print s#方法二：按行查找f5=open(&apos;test.txt&apos;)count=0for i in f5.readlines():    li=re.findall(&apos;hello&apos;,i)    if len(li)&gt;0:        count=count+len(li)print &apos;search&apos;,count,&apos;hello&apos;f5.close()#文件操作（替换）实例：把test.txt 中的hello全部换为&quot;hi&quot;，并把结果保存到myhello.txt中。f6=open(&apos;test.txt&apos;)f7=open(&apos;myhello.txt&apos;,&apos;a&apos;)for i in f6.readlines():    f7.write(i.replace(&apos;hello&apos;,&apos;hi&apos;))f6.close()f7.close()#实例：读取文件test.txt内容，去除空行和注释行后，以行为单位进行排序，并将结果输出为result.txt。f = open(&apos;cdays-4-test.txt&apos;)result = list()for line in f.readlines():                # 逐行读取数据    line = line.strip()                #去掉每行头尾空白    if not len(line) or line.startswith(&apos;#&apos;):   # 判断是否是空行或注释行        continue                  #是的话，跳过不处理    result.append(line)              #保存result.sort()                       #排序结果print resultopen(&apos;result.txt&apos;,&apos;w&apos;).write(&apos;%s&apos; % &apos;\n&apos;.join(result))        #保存入结果文件</code></pre></excerpt>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
